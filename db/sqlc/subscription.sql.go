// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: subscription.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const confirmSubscription = `-- name: ConfirmSubscription :one
UPDATE subscriptions
SET confirmed = $2
WHERE token = $1
RETURNING id, email, city, frequency, confirmed, token, created_at
`

type ConfirmSubscriptionParams struct {
	Token     uuid.UUID `json:"token"`
	Confirmed bool      `json:"confirmed"`
}

func (q *Queries) ConfirmSubscription(ctx context.Context, arg ConfirmSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, confirmSubscription, arg.Token, arg.Confirmed)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.City,
		&i.Frequency,
		&i.Confirmed,
		&i.Token,
		&i.CreatedAt,
	)
	return i, err
}

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (
  email,
  city,
  frequency
) VALUES (
  $1, $2, $3
) RETURNING id, email, city, frequency, confirmed, token, created_at
`

type CreateSubscriptionParams struct {
	Email     string        `json:"email"`
	City      string        `json:"city"`
	Frequency FrequencyEnum `json:"frequency"`
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, createSubscription, arg.Email, arg.City, arg.Frequency)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.City,
		&i.Frequency,
		&i.Confirmed,
		&i.Token,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSubscription = `-- name: DeleteSubscription :exec
DELETE FROM subscriptions WHERE token = $1
`

func (q *Queries) DeleteSubscription(ctx context.Context, token uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSubscription, token)
	return err
}

const getSubscription = `-- name: GetSubscription :one
SELECT id, email, city, frequency, confirmed, token, created_at FROM subscriptions
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetSubscription(ctx context.Context, email string) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscription, email)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.City,
		&i.Frequency,
		&i.Confirmed,
		&i.Token,
		&i.CreatedAt,
	)
	return i, err
}

const getSubscriptionForUpdate = `-- name: GetSubscriptionForUpdate :one
SELECT id, email, city, frequency, confirmed, token, created_at FROM subscriptions
WHERE token = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetSubscriptionForUpdate(ctx context.Context, token uuid.UUID) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionForUpdate, token)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.City,
		&i.Frequency,
		&i.Confirmed,
		&i.Token,
		&i.CreatedAt,
	)
	return i, err
}
