// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: weather.sql

package db

import (
	"context"
)

const createWeather = `-- name: CreateWeather :one
INSERT INTO weather_data (
  city,
  temperature,
  humidity,
  description
) VALUES (
  $1, $2, $3, $4
) RETURNING id, city, temperature, humidity, description, updated_at
`

type CreateWeatherParams struct {
	City        string  `json:"city"`
	Temperature float32 `json:"temperature"`
	Humidity    int16   `json:"humidity"`
	Description string  `json:"description"`
}

func (q *Queries) CreateWeather(ctx context.Context, arg CreateWeatherParams) (WeatherDatum, error) {
	row := q.db.QueryRowContext(ctx, createWeather,
		arg.City,
		arg.Temperature,
		arg.Humidity,
		arg.Description,
	)
	var i WeatherDatum
	err := row.Scan(
		&i.ID,
		&i.City,
		&i.Temperature,
		&i.Humidity,
		&i.Description,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWeather = `-- name: DeleteWeather :exec
DELETE FROM weather_data WHERE city = $1
`

func (q *Queries) DeleteWeather(ctx context.Context, city string) error {
	_, err := q.db.ExecContext(ctx, deleteWeather, city)
	return err
}

const getWeather = `-- name: GetWeather :one
SELECT id, city, temperature, humidity, description, updated_at FROM weather_data
WHERE city = $1 LIMIT 1
`

func (q *Queries) GetWeather(ctx context.Context, city string) (WeatherDatum, error) {
	row := q.db.QueryRowContext(ctx, getWeather, city)
	var i WeatherDatum
	err := row.Scan(
		&i.ID,
		&i.City,
		&i.Temperature,
		&i.Humidity,
		&i.Description,
		&i.UpdatedAt,
	)
	return i, err
}

const getWeatherForUpdate = `-- name: GetWeatherForUpdate :one
SELECT id, city, temperature, humidity, description, updated_at FROM weather_data
WHERE city = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetWeatherForUpdate(ctx context.Context, city string) (WeatherDatum, error) {
	row := q.db.QueryRowContext(ctx, getWeatherForUpdate, city)
	var i WeatherDatum
	err := row.Scan(
		&i.ID,
		&i.City,
		&i.Temperature,
		&i.Humidity,
		&i.Description,
		&i.UpdatedAt,
	)
	return i, err
}

const updateWeather = `-- name: UpdateWeather :one
UPDATE weather_data
SET temperature = $2,
    humidity = $3,
    description = $4,
    updated_at = NOW()
WHERE city = $1
RETURNING id, city, temperature, humidity, description, updated_at
`

type UpdateWeatherParams struct {
	City        string  `json:"city"`
	Temperature float32 `json:"temperature"`
	Humidity    int16   `json:"humidity"`
	Description string  `json:"description"`
}

func (q *Queries) UpdateWeather(ctx context.Context, arg UpdateWeatherParams) (WeatherDatum, error) {
	row := q.db.QueryRowContext(ctx, updateWeather,
		arg.City,
		arg.Temperature,
		arg.Humidity,
		arg.Description,
	)
	var i WeatherDatum
	err := row.Scan(
		&i.ID,
		&i.City,
		&i.Temperature,
		&i.Humidity,
		&i.Description,
		&i.UpdatedAt,
	)
	return i, err
}
