// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mishvets/WeatherForecast/service (interfaces: Service)
//
// Generated by this command:
//
//	mockgen --package mockservice --destination service/mock/service.go github.com/mishvets/WeatherForecast/service Service
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	service "github.com/mishvets/WeatherForecast/service"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetWeatherForCity mocks base method.
func (m *MockService) GetWeatherForCity(ctx context.Context, city string) (service.GetWeatherForCityResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeatherForCity", ctx, city)
	ret0, _ := ret[0].(service.GetWeatherForCityResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeatherForCity indicates an expected call of GetWeatherForCity.
func (mr *MockServiceMockRecorder) GetWeatherForCity(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeatherForCity", reflect.TypeOf((*MockService)(nil).GetWeatherForCity), ctx, city)
}
